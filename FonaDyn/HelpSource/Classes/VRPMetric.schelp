TITLE:: VRPMetric
summary:: Abstract base class for metric display classes
categories:: FonaDyn

DESCRIPTION::
On startup, FonaDyn collects all subclasses of VRPMetric that it can find, creates one object instance of each, and adds those instances to the array VRPSettings.metrics. Each Metric* subclass contains metric-specific strings, scalings and colour mappings.

At this writing, each metric has a unique fixed integer ID (the .metricNumber defined in its Metric*.sc file) that controls its position in this array, and also in the Layers menu. The ambition is eventually to implement metrics as "plugins" that can be added or removed as the research needs dictate and the CPU load permits.

CLASSMETHODS::

METHOD:: new
(describe method here)

ARGUMENT:: file
(not yet implemented: specify a file containing a metric definition)

returns:: (n/a)


INSTANCEMETHODS::

METHOD:: init
(describe method here)

ARGUMENT:: file
The pathname of an SC-lang file that contains the definition of a metric subclass. This functionality is experimental and probably redundant.

returns:: n/a

METHOD:: csvName
The text that becomes the column title for this metric in _VRP.csv files. It must not contain a column delimiter character.

returns:: a String

METHOD:: palette
The palette function that maps the metric values to colours. The function takes a single argument and returns a Color. (note 1)

returns:: a Function

METHOD:: minVal
The metric value corresponding to the lower bound of the colour scale. (note 1)

returns:: a Number

METHOD:: maxVal
The metric value corresponding to the upper bound of the colour scale. (note 1)

returns:: a Number

METHOD:: rangeLow
The value that will be mapped to 0% when the metric is used as a feature for clustering, that is, its value at the center of the radar plot.

returns:: a Number

METHOD:: rangeHigh
The value that will be mapped to 100% when the metric is used as a feature for clustering, that is, its value at the perimeter of the radar plot.

returns:: a Number

METHOD:: fnStandardizeMsg
A function that returns an array containing a message. This is used internally for setting up the SynthDef in VRPSDClusterPhon that does the pre-clustering scaling of all clustered metrics.

returns:: a message of the form ['linlin', minVal, maxVal, 0, 1]. For some metrics, the message is 'explin' instead, specifying that it is the logarithm of the metric that is clustered.

METHOD:: colorBarWarpType
The type of scale on the colour bar (note 1)

returns:: \lin or \exponential

METHOD:: setDifferencing
ARGUMENT:: bDiff
Switch the metric into its normal mode  (bDiff=false) or into the mode for displaying differences (bDiff=true). (note 2)

returns:: nothing

METHOD:: setClusters

ARGUMENT:: nClusters
ARGUMENT:: nCluster
If the VRPMetric subclass is used for clustered metrics, it needs to know what the number of clusters is (nClusters) and what the number of the current cluster is (nCluster). nCluster==0 means that the Metric should set its palette for drawing an all-cluster map layer. nCluster > 0 means that the palette should be for the single-cluster layer given by nCluster. (note 1)

METHOD:: defName
Pathname to an optional text file that can initialize this metric. Not currently used.

returns:: a String

METHOD:: menuText
A string that describes the metric in the Layers drop-down menu.

returns:: a String

METHOD:: unit
The text specifying the metric's unit (if applicable), or an empty String.

returns:: a short String

METHOD:: colorBarText
The text displayed in the colour bar (note 1)

returns:: a String

METHOD:: trendText
ARGUMENT:: str
The text that is displayed to the right of the Layers drop-down menu. (note 1)

returns:: a String

METHOD:: trendTextColor
ARGUMENT:: c
The color used to display the trendText. (note 1)

returns:: a Color

METHOD:: setTrendText
Apply the current trendText and trendTextColor to the specified text view. The background color is adjusted to give sufficient contrast for readability.

ARGUMENT:: tf
The view holding the trendText.

returns:: the view specified by tf.

METHOD:: configFromFile
(undocumented method)

Note (1): For clustered metrics, this method will return a different result depending on the number of clusters and the number of the selected cluster. This is implemented by first calling .setClusters(nClusters, nCluster) on the Metric* instance. In the superclass VRPMetric, .setClusters() is an empty method.

Note (2): All Metric* subclasses have two modes, for rendering absolute metric values or for rendering values of metric differences. The method .setDifferencing(bDiff) is typically called when the parent VRPLayer is created.

EXAMPLES::

If you wish to translate or modify any metric-related text strings or ranges, edit the source code for the corresponding VRPMetric subclass, or call the setter functions on the active instance of that metric.

